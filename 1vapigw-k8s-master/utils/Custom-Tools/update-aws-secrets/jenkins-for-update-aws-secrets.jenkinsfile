def getSecrets() {
    node {
        def awsAccount = getAccountID(getActiveEnvironment(this))
        def secretNames = sh(script: """
            eval \$(aws sts assume-role --role-arn arn:aws:iam::${awsAccount}:role/nexmo-jenkins-role --role-session-name jenkins-session | jq -r '.Credentials | "export AWS_ACCESS_KEY_ID=\\(.AccessKeyId)\\nexport AWS_SECRET_ACCESS_KEY=\\(.SecretAccessKey)\\nexport AWS_SESSION_TOKEN=\\(.SessionToken)\\n"')
            aws secretsmanager list-secrets --region eu-west-1 --query 'SecretList[].Name' --output json | jq -r '.[]'
        """, returnStdout: true).trim()
        return secretNames.tokenize('\n') 
    }
}

pipeline {
    agent any
    parameters {
        choice(
            choices: getSecrets(),
            description: 'Choose a secret',
            name: 'SecretName'
        )
        string(
            defaultValue: '',
            description: 'Enter the new key-value pairs for the secret in JSON format. Example: {"key1": "value1", "key2": "value2"}',
            name: 'NewValues'
        )
    }
    stages {
        stage('List Secrets') {
            steps {
                script {
                    node {
                        def awsAccount = getAccountID(getActiveEnvironment(this))

                        // Check if NewValues is empty
                        if (params.NewValues.trim() == "") {
                            error "NewValues parameter is empty. Please provide key-value pairs in JSON format."
                        }
                        else {

                        sh(script: """
                            eval \$(aws sts assume-role --role-arn arn:aws:iam::${awsAccount}:role/nexmo-jenkins-role --role-session-name jenkins-session | jq -r '.Credentials | "export AWS_ACCESS_KEY_ID=\\(.AccessKeyId)\\nexport AWS_SECRET_ACCESS_KEY=\\(.SecretAccessKey)\\nexport AWS_SESSION_TOKEN=\\(.SessionToken)\\n"')
                            aws secretsmanager update-secret --secret-id ${params.SecretName} --secret-string '${params.NewValues}' --region eu-west-1
                        """)
                        echo "New values set for secret: ${params.SecretName}"
                        }
                    }
                }
            }
        }
    }
}

def getActiveEnvironment(jenkinsScript) {
    def jenkinsUrl = jenkinsScript.env.JENKINS_URL
    if (jenkinsUrl.contains("dev.nexmo") || jenkinsUrl.contains("nexmo.dev")) {
        return "dev"
    } else if (jenkinsUrl.contains("qa.nexmo") || jenkinsUrl.contains("nexmo.qa")) {
        return "qa"
    } else if (jenkinsUrl.contains("prd.nexmo") || jenkinsUrl.contains("nexmo.prd")) {
        return "prd"
    } else {
        error "Invalid Jenkins instance."
    }
}

def getAccountID(environment) {
    switch (environment) {
        case "dev":
            return "684154893900"
        case "qa":
            return "507728974998"
        case "prd":
            return "275313334716"
        default:
            error "Invalid environment specified."
    }
}

