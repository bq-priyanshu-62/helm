name: progressive_rollout
on:
  workflow_dispatch:
    inputs:
      ENV_VAR:
        description: "Environment on which changes needs to be deploy"
        required: true
        type: choice
        options:
          - dev
          - qa
          - prod
      TARGET_BRANCH:
        description: "Feature branch with updated changes"
        required: true
        type: string
      PR_NUMBER:
        description: "PR number which is opened for feature branch."
        required: true
        type: string

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  validation:
    runs-on: ["self-hosted", "routes-deployment"]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: Vonage/1vapigw-k8s
          token: ${{ secrets.GH_PAT }}

      - name: Validate Inputs
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          pip3 install jq
          workflow_name=$(curl -s -H "Authorization: token ${{ secrets.GH_PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/Vonage/1vapigw-tf/actions/runs?status=in_progress" \
          | jq -r '.workflow_runs[0].name')
          if [ -z "$workflow_name" ]; then
            echo "Another Argocd related workflow is running in 1vapigw-tf repository"
            exit 1
          fi

          status=$(gh pr list | grep ${{inputs.PR_NUMBER}})
          if [ -z "$status" ]; then
            echo "PR number is invalid"
            exit 1
          fi

          if gh pr status -c | grep -A 1 ${{inputs.PR_NUMBER}} | grep "Not up to date"; then
            echo "PR ${{inputs.PR_NUMBER}} is out-of-date with the base branch"
            exit 1
          fi
          
          if ! gh pr view ${{inputs.PR_NUMBER}} | grep -q "Approved"; then
            echo "PR ${{inputs.PR_NUMBER}} is not approved"
            exit 1
          fi
          gh pr edit ${{inputs.PR_NUMBER}} --remove-label 'cant merge directly'

      - name: Lock PR Branch
        run: |
          pip3 install jq
          curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/Vonage/1vapigw-k8s/branches/master/protection >> branch_protection.json
          jq 'del(.required_status_checks.checks)' branch_protection.json >> input.json
          PROTECTION_PAYLOAD='{
            "required_status_checks": '"$(jq -r '.required_status_checks' input.json)"',
            "required_signatures": '"$(jq -r '.required_signatures.enabled' branch_protection.json)"',
            "enforce_admins": '"$(jq -r '.enforce_admins.enabled' branch_protection.json)"',
            "required_linear_history": '"$(jq -r '.required_linear_history.enabled' branch_protection.json)"',
            "allow_force_pushes": '"$(jq -r '.allow_force_pushes.enabled' branch_protection.json)"',
            "allow_deletions": '"$(jq -r '.allow_deletions.enabled' branch_protection.json)"',
            "block_creations": '"$(jq -r '.block_creations.enabled' branch_protection.json)"',
            "required_conversation_resolution": '"$(jq -r '.required_conversation_resolution.enabled' branch_protection.json)"',
            "lock_branch": true,
            "allow_fork_syncing": '"$(jq -r '.allow_fork_syncing.enabled' branch_protection.json)"',
            "required_pull_request_reviews": '"$(jq -r '.required_pull_request_reviews' branch_protection.json)"',
            "restrictions": '"$(jq -r '.restrictions' branch_protection.json)"'
          }'
          curl -L -X PUT -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ${{ secrets.GH_PAT }}" -H "X-GitHub-Api-Version: 2022-11-28" https://api.github.com/repos/Vonage/1vapigw-k8s/branches/${{ inputs.TARGET_BRANCH }}/protection -d "$PROTECTION_PAYLOAD"
  
  set_config:
    runs-on: ["self-hosted", "routes-deployment"]
    needs: validation
    outputs:
      regions-list: ${{ steps.environment.outputs.regions-list }}      
    steps:
      - name: Set Output Variables
        id: environment
        run: |
          if [ "${{ inputs.ENV_VAR }}" == "dev" ]; then
            REGIONS='
              {"region": "use1"},
              {"region": "euw1"},
            '
          elif [ "${{ inputs.ENV_VAR }}" == "qa" ]; then
            REGIONS='
              {"region": "euw1"},
            '
          elif [ "${{ inputs.ENV_VAR }}" == "prod" ]; then
            REGIONS='
              {"region": "mec1"},
              {"region": "apse3"},
              {"region": "apse2"},
              {"region": "apse1"},
              {"region": "usw2"},
              {"region": "euc1"},
              {"region": "euw1"},
              {"region": "use1"},
            '
          fi
          echo ::set-output name=regions-list::{\"include\":[$REGIONS]}

  update_target_branch_for_active:
    runs-on: ["self-hosted", "routes-deployment"]
    needs: [set_config]
    environment: 'PROGRESSIVE-ROLLOUT'
    strategy:
      max-parallel: 1
      matrix: ${{ fromJson(needs.set_config.outputs.regions-list) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: Vonage/1vapigw-k8s
          token: ${{ secrets.GH_PAT }}
          ref: master

      - name: Switching Argocd target branch
        env:
          KUBE_HOST: ${{ inputs.ENV_VAR }}_${{ matrix.region }}_C1_HOST
          AUTHORIZATION_TOKEN: ${{ inputs.ENV_VAR }}_${{ matrix.region }}_C1_TOKEN
        run: |-
          KUBE_HOST=${{ secrets[env.KUBE_HOST] }}
          AUTHORIZATION_TOKEN=${{ secrets[env.AUTHORIZATION_TOKEN] }}
          python3 scripts/argo_target_update.py ${{ inputs.TARGET_BRANCH }}
          
  merging_pr:
    runs-on: ["self-hosted", "routes-deployment"]
    needs: [update_target_branch_for_active]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: Vonage/1vapigw-k8s
          token: ${{ secrets.GH_PAT }}

      - name: Merging PR
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |-
          gh pr comment ${{inputs.PR_NUMBER}} --body "bors merge"
          sleep 40
          counter=1
          while [ $counter -le 3 ]; do
            if gh pr view ${{inputs.PR_NUMBER}} | grep "Merged"; then
              echo "Pull request ${{inputs.PR_NUMBER}} successfully merged into master"
              break
            else
              if [ $counter -lt 3 ]; then
                sleep 40
              else
                echo "Pull request ${{inputs.PR_NUMBER}} not merged"
                exit 1
              fi
            fi
            counter=$((counter + 1))
          done

  save_data:
    runs-on: ["self-hosted", "routes-deployment"]
    needs: validation
    steps:
      - name: Save data
        run: |
           mkdir -p ./data
           echo ${{ inputs.TARGET_BRANCH }} > ./data/targetbranch
           echo ${{ inputs.ENV_VAR }} > ./data/environment
      - uses: actions/upload-artifact@v4
        with:
          name: inputdata
          path: data/

          